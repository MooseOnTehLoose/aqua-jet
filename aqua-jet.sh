#! /bin/bash
#
# Version 0.0.5
#
# Fixed Canvos Tag selection to not suggest Patch or RC releases
# Added Formatting
#
# Removed OSBUILDER for now
# Removed ttl.sh registry default option


lb="\e[94m"
nc="\e[0m"

echo -e "${lb}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⡂⣀⣀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣄⣴⣲⠩⡩⠉⠉⢉⡘⣈⣳⢮⡽⣿⣧⣲⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠂⠁⣹⠆⠀⠸⢚⡳⡚⣭⣾⡍⢶⣾⣿⣿⣿⣿⣿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⣉⣀⡀⠀⣰⡯⡄⠐⣚⣢⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⡴⢡⣾⡿⠛⠏⢠⠟⠸⢐⣨⢴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢠⠎⣼⣿⣿⢓⣆⣢⡦⣤⡔⠛⠉⠜⢛⣿⠟⠋⠁⠀⠀⠀⠀⠀⠈⠛⠟⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠛⠀⠿⢔⠟⢸⣻⣿⣿⣎⠛⢦⠀⣴⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀
⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⢿⣿⣿⣿⣷⢨⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀
⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⢀⠞⢁⣮⣯⣿⡟⠀⠀⠀⠀⠀⠀⠀⣀⣠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣯⡄⠀⠀⠀
⠀⠀⠀⠀⢸⠄⠀⠀⠀⠀⢎⣀⣸⣿⣷⡟⠁⠀⠀⠀⠀⠀⢀⣾⣿⣿⠿⢿⣦⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀
⠀⠀⠀⠀⠈⡄⠀⠀⠀⠀⡉⠙⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣇⠀⢀⣯⠀⠀⠀⠀⠀⠀⠐⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀
⠀⣞⠛⢒⡄⡱⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⢻⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀
⢸⡇⠀⡜⠂⠀⠑⢄⠀⠀⠔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠋⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣟⣯⣽⣿⣿⣿⠂⠀⠀⠀
⠸⡇⠀⡧⠀⠐⠠⢀⠱⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣿⣿⣿⣿⢿⣿⠃⠀⠀⠀⠀
⠀⣧⠀⢑⠀⠡⠐⢀⠠⠈⠱⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⣠⠿⡫⡻⡻⡽⣻⠟⠁⠀⠀⠀⠀⠀
⠀⢻⡄⠀⡃⢀⠐⠠⠀⠂⠄⠨⣧⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⣀⣠⣔⠟⠉⢼⡏⢿⣮⡷⠋⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢻⡄⠈⢆⠀⠂⠁⡐⠠⠀⢪⣿⣿⣷⣶⣶⣤⣤⣤⣤⣤⣤⣤⣤⣤⣶⣿⣿⣿⣷⣶⣭⡾⠞⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢳⣆⠉⡀⠀⠁⠀⡀⠄⣴⡿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⡿⣿⣏⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣰⡿⣻⣦⣀⠀⠀⠄⠀⢰⠏⠀⢄⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⡎⢧⣽⣻⣷⣄⠙⢳⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢿⣾⣿⡗⣝⡃⠁⠀⠀⡄⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⢾⣟⠽⢻⣿⣿⡄⢀⠈⠹⠦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣻⠋⠀⠠⠂⠀⠄⠠⡄⢥⢨⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⠺⠧⢾⣿⡿⣯⡀⠀⠄⢀⠈⠂⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢠⠍⣀⠀⠎⠀⠠⠀⠘⢲⢰⣚⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣮⡽⣽⡿⠣⡾⢹⣗⡤⣄⠀⠠⠀⠈⢂⠀⠀⠀⠀⠀⠀
⠀⠀⠰⡄⠄⠀⠀⠀⠄⠂⠀⢿⣿⣫⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣱⣽⡅⡯⣏⢑⠶⠍⣔⣀⣂⡭⠣⠀⠀⠀⠀⠀
⠀⠠⡇⠀⠁⠀⠀⠀⠂⠠⠁⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⡫⠙⡥⡲⣱⠧⠐⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢹⠖⠠⠐⢄⠀⢈⠠⠐⠀⠈⠙⢿⣿⣿⣿⡻⢿⣿⣯⡷⣭⣟⣟⠊⠀⢄⡹⣮⠾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢧⡀⡄⠊⠘⣄⠀⠂⢁⠂⠀⠀⠈⠛⢿⢿⣷⡞⡟⣝⣁⣁⣠⣴⡼⠞⠋⠁⠀⢘⡧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠈⠳⣜⣄⠌⢚⢄⠁⠠⠀⠁⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠩⠁⠀⠀⠀⠀⠀⠀⣴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⢳⣆⣀⣈⣀⣄⣠⣔⡀⠀⠀⠀⠀⠀⠀⢀⠀⠄⠀⠀⠀⡀⠀⣀⣤⠾⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡠⠔⠂⠽⠿⣿⣿⣗⠂⠀⢹⣦⠄⠀⠐⠀⠀⠀⠀⢀⣤⠶⠓⠐⢚⣍⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠐⠞⠠⢦⣶⣴⣾⣿⣿⣤⣴⣶⣤⠿⠛⠛⠛⠚⠛⠛⢛⣿⣷⣶⣿⣿⣶⣼⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠉⠈⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠛⠛⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡠⠀⠐⡁
Aqua Jet v0.0.5${nc}"

echo -e "\e]8;;https://github.com/MooseOnTehLoose/aqua-jet\e\\https://github.com/MooseOnTehLoose/aqua-jet\e]8;;\e\\"
printf "\n"


git clone https://github.com/spectrocloud/CanvOS.git
cd CanvOS
canvos=$(git tag -l --sort=-v:refname | awk '!/-/' | head -n 1)
printf "\n"

# Choose Canvos Version
read -p "$(echo -e "Use latest CanvOS: ${lb}$canvos${nc} ? (y/n): " )" confirm

# Check the response
if [[ "$confirm" == "n" ]]; then
  #display all versions
  echo -e "Listing all Tags:\n"
  git tag -l --sort=-v:refname | awk '!/-/' | column
  printf "\n"
  read -p "Select CanvOS Version: " canvos 
fi

echo -e "Using tag: ${lb}$canvos${nc}\n"

git checkout $canvos
printf "\n"

read -p "Enter a custom tag for this build: " custom_tag
if [[ "$custom_tag" == "" ]]; then
  custom_tag="palette"
fi

# ttl.sh no longer allows large images generated by CanvOS 
read -p "$(echo -e "Choose a remote registry location to push Provider Image - No HTTP(S):// ! \nex: harbor.test.com/edge\n\nRegistry: ")" image_registry

read -p "$(echo -e "OS, leave blank for ${lb}ubuntu${nc}: " )" os
if [[ "$os" == "" ]]; then
  os="ubuntu"
fi

read -p "$(echo -e "OS Version, leave blank for Ubuntu ${lb}22.04${nc}: ")" os_version
if [[ "$os_version" == "" && $os == "ubuntu" ]]; then
  os_version="22.04"
fi

read -p "$(echo -e "Image Repo, leave blank for ${lb}$os${nc}: ")" image_repo
if [[ "$image_repo" == "" ]]; then
  image_repo=$os
fi

k8s_type=("k3s" "kubeadm" "kubeadm-fips" "nodeadm" "rke2")
read -p "$(echo -e "K8s Distribution, leave blank for ${lb}k3s${nc}\nChoices are: ${lb}${k8s_type[@]}${nc} \n")" k8s_distribution
if [[ "$k8s_distribution" == "" ]]; then
  k8s_distribution="k3s"
fi

if [[ ! " ${k8s_type[@]} " =~ " ${k8s_distribution} " ]]; then
  echo -e "Error: ${lb}${k8s_distribution}${nc} is not a valid option, exiting"
  exit
else
  echo -e "Choosing ${lb}${k8s_distribution}${nc}\n"
fi

echo -e "Possible versions for ${lb}$k8s_distribution${nc}:\n"  
json=$(jq -c ".${k8s_distribution}[]"  ./k8s_version.json)
json_without_quotes=$(echo ${json//\"/""})
IFS=$' ' read -r -d '' -a array <<< "$json_without_quotes"
latest_k8s=$(echo -e ${array[-1]} | tr -d '\n')
printf "%s\n" ${json_without_quotes}  | pr -t -8 -s""
printf "\n"


read -p "K8s Version: " k8s_version
if [[ "$k8s_version" == "" ]]; then
  echo -e "Using latest version: ${lb}$latest_k8s${nc}"
  k8s_version="$latest_k8s"
fi
printf "\n"

read -p "$(echo -e "ISO Name, Leave blank to use: ${lb}$custom_tag-edge:$canvos-$os:$os_version-$k8s_distribution:$k8s_version.iso${nc} " )" iso_name
printf "\n"

if [[ "$iso_name" == "" ]]; then
  iso_name="$custom_tag-edge:$canvos-$os:$os_version-$k8s_distribution:$k8s_version"
  echo -e "Image File location: CanvOS/build/${lb}$iso_name.iso${nc}"
fi

base_image=""
if [[ "$os" == "slem" ]]; then
  read -p "$(echo -e "Default Base Image for SLEM/SLES: ${lb}docker.io/3pings/sles-m:v5.4-v22${nc} ")" base_image
  
  if [["base_image" == ""]]; then
  slem_default="docker.io/3pings/sles-m:v5.4-v22"
  fi

  slem_base="BASE_IMAGE=$base_image"
fi
printf "\n"

kernel="false"
read -p "Update Kernel? (y/n): " updatekernel
if [[ "$updatekernel" == "y" ]]; then
  kernel="true"
  echo -e "Updating kernel\n"
else
  echo -e "Not updating Kernel\n"
fi

arg="CUSTOM_TAG=${custom_tag}
IMAGE_REGISTRY=${image_registry}
OS_DISTRIBUTION=${os}
OS_VERSION=${os_version}
IMAGE_REPO=${image_repo}
K8S_DISTRIBUTION=${k8s_distribution}
K8S_VERSION=${k8s_version}
ISO_NAME=${iso_name}
ARCH=amd64
${base_image}
UPDATE_KERNEL=${kernel}"

echo -e "arg file for build:\n\n$arg\n"
echo "$arg" > .arg

read -p "Modify .arg file before build? (y/n) " modifyarg
if [[ "$modifyarg" == "y" ]]; then
  vim ".arg"
fi


read -p "Edge Host Token: " edgehosttoken

read -p "Palette Endpoint. Leave blank for api.spectrocloud.com: " paletteendpoint
if [[ "$paletteendpoint" == "" ]]; then
  paletteendpoint="api.spectrocloud.com"
fi

tui="false"
read -p "Include TUI? y\n: " textui
if [[ "$textui" == "y" ]]; then
  tui="true"
fi

user_data="#cloud-config
stylus:
  includeTui: ${tui}
  site:
    paletteEndpoint: ${paletteendpoint}
    edgeHostToken: ${edgehosttoken}

install:
  poweroff: true

stages:
  initramfs:
    - users:
        kairos:
          groups:
            - sudo
          passwd: kairos
      name: Create user and assign to sudo group"

echo -e "User data for build: \n" 
echo "$user_data" > user-data
cat user-data
printf "\n"

read -p "Modify User Data file before build? (y/n) " modifyuserdata
if [[ "$modifyuserdata" == "y" ]]; then
  vim "user-data"
fi

# Prompt for ISO Build
read -p "Ready to build ISO? (y/n) " buildiso
printf "\n"

# Check the response
if [[ "$buildiso" == "y" ]]; then
  ./earthly.sh +iso
else
  echo -e "Build ISO with ${lb}./earthly.sh +iso${nc}\n"
fi

byos_template='pack:
  content:
    images:
      - image: "{{.spectro.pack.edge-native-byoi.options.system.uri}}"
  # Below config is default value, please uncomment if you want to modify default values
  #drain:
    #cordon: true
    #timeout: 60 # The length of time to wait before giving up, zero means infinite
    #gracePeriod: 60 # Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used
    #ignoreDaemonSets: true
    #deleteLocalData: true # Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained)
    #force: true # Continue even if there are pods that do not declare a controller
    #disableEviction: false # Force drain to use delete, even if eviction is supported. This will bypass checking PodDisruptionBudgets, use with caution
    #skipWaitForDeleteTimeout: 60 # If pod DeletionTimestamp older than N seconds, skip waiting for the pod. Seconds must be greater than 0 to skip.
options:
  system.uri: "{{ .spectro.pack.edge-native-byoi.options.system.registry }}/{{ .spectro.pack.edge-native-byoi.options.system.repo }}:{{ .spectro.pack.edge-native-byoi.options.system.k8sDistribution }}-{{ .spectro.system.kubernetes.version }}-{{ .spectro.pack.edge-native-byoi.options.system.peVersion }}-{{ .spectro.pack.edge-native-byoi.options.system.customTag }}"

'
byos_data="
  system.registry: ${image_registry} 
  system.repo: ${image_repo}
  system.k8sDistribution: ${k8s_distribution}
  system.osName: ${os}
  system.peVersion: ${canvos}
  system.customTag: ${custom_tag}
  system.osVersion: ${os_version}"

echo "${byos_template} ${byos_data}" > "${custom_tag}-provider.yaml"
echo -e "BYOOS Layer yaml exported as: ${lb}${custom_tag}-provider.yaml${nc}\n"

# Prompt for Provider Image Build
read -p "Ready to build Provider Image? (y/n) " confirm
printf "\n"

# Check the response
if [[ "$confirm" == "y" ]]; then

  #Build the Provider image
  ./earthly.sh +build-provider-images
  echo -e "Pushing Provider image to Docker Registry:\ndocker push ${image_registry}/${os}:${k8s_distribution}-${k8s_version}-${canvos}-${custom_tag}"
  docker push ${image_registry}/${os}:${k8s_distribution}-${k8s_version}-${canvos}-${custom_tag}
else
  echo -e "Build Provider Image with:\n  ${lb}./earthly.sh +build-provider-images${nc}\n"
  echo -e "Push Provider Image with:\n  ${lb}docker push ${image_registry}/${os}:${k8s_distribution}-${k8s_version}-${canvos}-${custom_tag}${nc}\n"
fi
